@using FastSchedule.MVC.ViewModels;
@model HomeViewModel

@{
    @if (Model.StartWeekGap != null)
    {
        for (int i = 0; i < Model.StartWeekGap; i++)
        {
            <div class="grid-item empty-grid">
            </div>
        }
    }
    //Dictionary<int, string> intDayRusString = new()
    //{
    //    {1, "Январь"},
    //    {2, "Февраль"},
    //    {3, "Март"},
    //    {4, "Апрель"},
    //    {5, "Май"},
    //    {6, "Июнь"},
    //    {7, "Июль"},
    //    {8, "Август"},
    //    {9, "Сентябрь"},
    //    {10, "Октябрь"},
    //    {11, "Ноябрь"},
    //    {12, "Декабрь"},
    //};

    foreach (var day in Model.Schedule.Days)
    {
        <div id="@day.Date.Year.@day.Date.Month.@day.Date.Day" class="grid-item @((int)day.Date.DayOfWeek == 6 || (int)day.Date.DayOfWeek == 0 ? "weekend-day" : "")
        @(Model.TodayDate == day.Date ? "selected-day" : "")">
                <input name="year" value="@day.Date.Year" type="hidden"/>
                <input name="month" value="@day.Date.Month" type="hidden" />
                <input name="day" value="@day.Date.Day" type="hidden" />
                <div class="manage-and-date">
                <img class="manage-grid" src="/images/icons/info.png" />
                    <p style="@(Model.TodayDate == day.Date ? "text-decoration: underline;" : "")">@day.Date.Day</p>
                </div>
                    @if (day.Tasks != null && day.Tasks.Count() != 0)
                    {
                        <div class="events" )">
                    @{
                        int countOfTasks = 0;
                    }
                        @foreach (var item in day.Tasks)
                        {
                        countOfTasks++;
                        <div class="task">
                                <p style="background-color:#@item.Color" class="event-circle"></p>
                                <p class="event-label">@item.Label</p>
                                @if (item.EventTime != null)
                                {
                                    <p class="event-time">@item.EventTime</p>
                                }
                        </div>
                        if (countOfTasks >= 2)
                            break;
                        }
                        @if(@day.Tasks.Count() > 2){
                            <div class="small-block-of-tasks">
                        @for (int i = countOfTasks; i < day.Tasks.Count(); i++)
                        {
                                <p style="background-color:#@day.Tasks[i].Color" class="event-circle"></p>
                        }
                            </div>
                        }
                        </div>
                    }
            </div>
        }

}